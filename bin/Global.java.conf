import java.lang.reflect.Method;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;


import org.apache.commons.codec.digest.DigestUtils;

import play.Application;
import play.GlobalSettings;
import play.Logger;
import play.data.DynamicForm;
import play.data.Form;
import play.libs.Akka;
import play.libs.Time.CronExpression;
import play.libs.Yaml;
import play.mvc.Action;
import play.mvc.Http.Request;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import scala.concurrent.duration.Duration;
import scala.concurrent.duration.FiniteDuration;
import thread.EveryDayRask;
import thread.StockListTask;
import thread.StockMarketKLineUpdate;
import thread.StockMarketKLineUpdate_file;
import thread.StockMarketPriceUpdate;
import thread.StockRealDataTask;
import thread.StockRealLineBackUp;
import thread.StrategyJingRealTime;
import utils.redis.RedisAPI;
import actors.StockMarketKLineUpdateActor;
import actors.StockMarketPriceUpdateActor;
import actors.StrategyActor;
import akka.actor.ActorRef;
import akka.actor.Cancellable;
import akka.actor.Props;

import com.avaje.ebean.Ebean;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

////import com.typesafe.plugin.RedisPlugin;

public class Global extends GlobalSettings {

	private static final String KEYWORD = "keyword";
	private static final int STEP = 100;// 3000;

	/*
	 * private static final Injector INJECTOR = createInjector();
	 * 
	 * @Override public <A> A getControllerInstance(Class<A> controllerClass)
	 * throws Exception { return INJECTOR.getInstance(controllerClass); }
	 * 
	 * private static Injector createInjector() { return Guice.createInjector();
	 * }
	 */

	/**
	 * 对请求进行md5加密，暂时先注掉,以便于调试
	 */

	// @Override
	// public Action onRequest(Request request, Method actionMethod) {
	//
	//
	// String keyValue = "";
	// StringBuffer needMD5 = new StringBuffer();
	// TreeMap<String, String[]> parasTreeMap = new TreeMap<String, String[]>();
	// parasTreeMap.putAll(request.queryString());
	// for (String key : parasTreeMap.keySet()) {
	// if ("key".equals(key)) {
	// keyValue = request.getQueryString(key);
	// } else {
	// needMD5.append("&");
	// needMD5.append(key);
	// needMD5.append("=");
	// needMD5.append(request.getQueryString(key));
	// }
	// }
	// needMD5.append("&");
	// needMD5.append(KEYWORD);
	// String needMD5Str = needMD5.toString().replaceFirst("&", "");
	// if (keyValue.equals(DigestUtils.md5Hex(needMD5Str))) {
	// return super.onRequest(request, actionMethod);
	// } else {
	// return null;
	// }
	// }

	@Override
	public Action onRequest(Request request, Method actionMethod) {

		// request.body().asMultipartFormData();

		String keyValue = "";
		StringBuffer needMD5 = new StringBuffer();
		// TreeMap<String, String[]> parasTreeMap = new TreeMap<String,
		// String[]>();
		// parasTreeMap.putAll(request.queryString());
		// for (String key : parasTreeMap.keySet()) {
		// if ("key".equals(key)) {
		// keyValue = request.getQueryString(key);
		// } else {
		// needMD5.append("&");
		// needMD5.append(key);
		// needMD5.append("=");
		// needMD5.append(request.getQueryString(key));
		// }
		// }
		// needMD5.append("&");
		// needMD5.append(KEYWORD);
		// String needMD5Str = needMD5.toString().replaceFirst("&", "");
	System.out.println("|"+request.uri());
		if ("/ycf/upload_avatar1".equals(request.path())||"0".equals(request.getQueryString("mid"))) {
			
			
			return super.onRequest(request, actionMethod);
		}
		
		return super.onRequest(request, actionMethod);
//		2015年8月10日14:27:05 
//		if("0".equals(request.getQueryString("userId"))){
//		
//			String keyvalue = DigestUtils.md5Hex("gongxifacai");
//			if (keyvalue.equalsIgnoreCase(request.getQueryString("keyword"))) 
//			{
//
//				return super.onRequest(request, actionMethod);
//			} 
//			else {
//				return null;
//
//			}
//			
//			
//			  //  return super.onRequest(request, actionMethod);
//		
//		}else{
//			
//			
//			String keyvalue = DigestUtils.md5Hex("keyword");
//			if (keyvalue.equalsIgnoreCase(request.getQueryString("keyword"))) 
//			{
//
//				return super.onRequest(request, actionMethod);
//			} 
//			else {
//				return null;
//
//			}
//
//		}

		// if (keyValue.equals(DigestUtils.md5Hex(needMD5Str))) {
		// return super.onRequest(request, actionMethod);
		// } else {
		// return null;
		// }
		//return super.onRequest(request, actionMethod);

	}

	@Override
	public void onStart(Application app) {
		super.onStart(app);

		Logger.info("global begin:"
				+ new SimpleDateFormat("yyyyMMddHHmmss-SSS").format(new Date()));

		// test this.loadInitialData();
		// test this.loadFakeDataInRedis();
		// this.fetchingRealtimeStockMarketsFromWStock();

		/**
		 * new thread
		 */

		
	
	}

//	private void strategy() {
//		try {
//			// 每天1天执行
//			CronExpression e = new CronExpression("0 00 01 ? * *");
//			Date nextValidTimeAfter = e.getNextValidTimeAfter(new Date());
//			FiniteDuration d = Duration.create(nextValidTimeAfter.getTime()
//					- System.currentTimeMillis(), TimeUnit.MILLISECONDS);
//			ActorRef instance = Akka.system().actorOf(
//					Props.create(StrategyActor.class));
//			Akka.system()
//					.scheduler()
//					.schedule(d, Duration.create(24, TimeUnit.HOURS), instance,
//							"fetching", Akka.system().dispatcher(), null);
//		} catch (Exception ex) {
//			Logger.error("strategy schedule error ", ex);
//		}
//	}
//
//
//
//	private void StockMarketPriceUpdate() {
//		try {
//			// 9点开始每分钟执行一次，截至时间15：00 时间段控制在函数内部，外部只管周期
//			CronExpression e = new CronExpression("0 * * ? * *");// 整分钟开始
//			Date nextValidTimeAfter = e.getNextValidTimeAfter(new Date());
//			System.out.println("nextValidTimeAfter:"
//					+ new SimpleDateFormat("yyyyMMddHHmmss")
//							.format(nextValidTimeAfter));
//			FiniteDuration d = Duration.create(nextValidTimeAfter.getTime()
//					- System.currentTimeMillis(), TimeUnit.MILLISECONDS);
//			ActorRef instance = Akka.system().actorOf(
//					Props.create(StockMarketPriceUpdateActor.class));
//			Akka.system()
//					.scheduler()
//					.schedule(d, Duration.create(60, TimeUnit.SECONDS),
//							instance, "PriceUpdate",
//							Akka.system().dispatcher(), null);
//		} catch (Exception ex) {
//			Logger.error("strategy schedule error ", ex);
//		}
//	}
//
//	private void StockMarketKLineUpdate() {
//		try {
//			// 每天的15：05执行一次
//			CronExpression e = new CronExpression("0 30 17 ? * *");
//			Date nextValidTimeAfter = e.getNextValidTimeAfter(new Date());
//			// System.out.println("nextValidTimeAfter:"+new
//			// SimpleDateFormat("yyyyMMddHHmmss").format(nextValidTimeAfter));
//			FiniteDuration d = Duration.create(nextValidTimeAfter.getTime()
//					- System.currentTimeMillis(), TimeUnit.MILLISECONDS);
//			ActorRef instance = Akka.system().actorOf(
//					Props.create(StockMarketKLineUpdateActor.class));
//			Akka.system()
//					.scheduler()
//					.schedule(d, Duration.create(24, TimeUnit.HOURS), instance,
//							"KLineUpdate", Akka.system().dispatcher(), null);
//			// Akka.system().scheduler().schedule(Duration.Zero(),
//			// Duration.create(24, TimeUnit.HOURS), instance, "KLineUpdate",
//			// Akka.system().dispatcher(), null);
//		} catch (Exception ex) {
//			Logger.error("strategy schedule error ", ex);
//		}
//	}
//
////	private void loadInitialData() {
////		if (User.find.findRowCount() == 0) {
////			Ebean.save((List<?>) Yaml.load("initial-data.yml"));
////		}
////	}
//	
//	private void loadStrategyJingRealTime() {
//
//		
//
//		ScheduledExecutorService service = Executors.newScheduledThreadPool(1);
//
//		long initialDelay1 = 3;
//		long period1 = 60;
//
//		
//		StrategyJingRealTime sktask = new StrategyJingRealTime();
//			// 从现在开始1秒钟之后，每隔10秒钟执行一次job1
//			service.scheduleAtFixedRate(sktask, initialDelay1, period1,
//					TimeUnit.SECONDS);
//
//
//	}
//	
//	
//	
//	
//
//	private void loadStockThread() {
//
//	
//
//		ScheduledExecutorService service = Executors.newScheduledThreadPool(1);
//
//		long initialDelay1 = 5;
//		long period1 = 3;
//
//		// start
//		int STEP = 3000;
//		JedisPool pool = RedisAPI.getPool();
//		Jedis j = pool.getResource();
//
//		final ObjectMapper mapper = new ObjectMapper();
//		JsonNode node;
//		try {
//
//			node = mapper.readTree(j.get("stocklist"));
//
//			RedisAPI.returnResource(pool, j);
//			// System.out.println("-------node----"+node);
//			String grid = "";
//
//			
//			int size = node.size();
//			Date aa = new Date();
//			System.out.println("-----stocklist--size----" + size + aa);
//
//			int Threadtimes = size / STEP;
//			int i = 0;
//			for (i = 0; i < Threadtimes; i++) {
//				for (int k = STEP * i; k < (STEP) * (i + 1); k++) {
//					grid += node.get(k).get("code").asText() + ",";
//				}
//				StockRealDataTask sktask = new StockRealDataTask(grid);
//				// 从现在开始1秒钟之后，每隔10秒钟执行一次job1
//				service.scheduleAtFixedRate(sktask, initialDelay1, period1,
//						TimeUnit.SECONDS);
//				// this.doRequest(grid);
//				grid = "";
//			}
//
//			for (int k = STEP * i; k < STEP * i + size % STEP; k++) {
//				grid += node.get(k).get("code").asText() + ",";
//			}
//			// System.out.print("---thread--- run"+grid);
//			StockRealDataTask sktask = new StockRealDataTask(grid);
//			// 从现在开始1秒钟之后，每隔10秒钟执行一次job1
//			service.scheduleAtFixedRate(sktask, initialDelay1, period1,
//					TimeUnit.SECONDS);
//
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		// end
//
//		// Timer调度方式
//		// Timer timer = new Timer();
//		//
//		// timer.schedule(new RemindTask(), seconds*1000);
//		// 以每时间断执行一次
//		// timer.scheduleAtFixedRate(sktask, startTime, daySpan);
//
//		// long initialDelay2 = 1;
//		// long delay2 = 1;
//		// // 从现在开始2秒钟之后，每隔2秒钟执行一次job2
//		// service.scheduleWithFixedDelay(
//		// new ScheduledExecutorTest("job2"), initialDelay2,
//		// delay2, TimeUnit.SECONDS);
//
//	}
//
//	private void loadStockMarketKLineUpdate() {
//
//		long daySpan = 24 * 60 * 60 * 1000;
//		System.out.println("About to stocklist task.");
//
//		// 规定的每天时间15:33:30运行
//		final SimpleDateFormat sdf = new SimpleDateFormat(
//				"yyyy-MM-dd '16:30:30'");
//		// 首次运行时间
//		SimpleDateFormat simFmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//		String str_date = sdf.format(new Date());
//		// java.util.Date startTime;
//		java.util.Date startTime = new Date();
//		try {
//			startTime = simFmt.parse(str_date);
//		} catch (ParseException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		StockMarketKLineUpdate sktask = new StockMarketKLineUpdate();
//
////		if (System.currentTimeMillis() > startTime.getTime())
////			startTime = new Date(startTime.getTime() + daySpan);
//		System.out.println("Kline time"+ startTime);
//
//		Timer timer = new Timer();
//
//		// timer.schedule(new RemindTask(), seconds*1000);
//		// 以每24小时执行一次
//		timer.scheduleAtFixedRate(sktask, startTime, daySpan);
//
//		// 线程服务调度方式
//		// ScheduledExecutorService service =
//		// Executors.newScheduledThreadPool(10);
//		//
//		// long initialDelay1 = 1;
//		// long period1 = 60;
//		// // 从现在开始1秒钟之后，每隔60秒钟执行一次job1
//		// service.scheduleAtFixedRate(
//		// sktask, initialDelay1,
//		// period1, TimeUnit.SECONDS);
//
//		// long initialDelay2 = 1;
//		// long delay2 = 1;
//		// // 从现在开始2秒钟之后，每隔2秒钟执行一次job2
//		// service.scheduleWithFixedDelay(
//		// new ScheduledExecutorTest("job2"), initialDelay2,
//		// delay2, TimeUnit.SECONDS);
//
//		System.out.println("Task loadStockMarketKLineUpdate.");
//	}
//	
//	
//	
//	private void loadStockMarketKLineUpdate_file() {
//
//		long daySpan = 24 * 60 * 60 * 1000;
//		System.out.println("About to stocklist task.");
//
//		// 规定的每天时间15:33:30运行
//		final SimpleDateFormat sdf = new SimpleDateFormat(
//				"yyyy-MM-dd '15:23:30'");
//		// 首次运行时间
//		SimpleDateFormat simFmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//		String str_date = sdf.format(new Date());
//		// java.util.Date startTime;
//		java.util.Date startTime = new Date();
//		try {
//			startTime = simFmt.parse(str_date);
//		} catch (ParseException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		StockMarketKLineUpdate_file sktask = new StockMarketKLineUpdate_file();
//
//		if (System.currentTimeMillis() > startTime.getTime())
//			startTime = new Date(startTime.getTime() + daySpan);
//
//		Timer timer = new Timer();
//
//		// timer.schedule(new RemindTask(), seconds*1000);
//		// 以每24小时执行一次
//		timer.scheduleAtFixedRate(sktask, startTime, daySpan);
//
//		
//		System.out.println("Task loadStockMarketKLineUpdate.");
//	}
//
//	private void loadStockReal_163() {
//
//		// StockMarketPriceUpdate.cleanHisData();//清理历史数据
//
//		// 线程服务调度方式
//		ScheduledExecutorService service = Executors.newScheduledThreadPool(1);
//
//		//1分钟图形
//		long initialDelay2 = 0;
//		long period2 = 10;
//		long initialDelay3 = 10;
//		long period3 = 10;
//		// start
//
//		JedisPool pool = RedisAPI.getPool();
//		Jedis j = pool.getResource();
//
//		final ObjectMapper mapper = new ObjectMapper();
//		JsonNode node;
//		try {
//
//			node = mapper.readTree(j.get("stocklist"));
//
//			RedisAPI.returnResource(pool, j);
//			// System.out.println("-------node----"+node);
//			String grid = "";
//
//			int size = node.size();
//			Date aa = new Date();
//			System.out.println("------realLin-size----" + size + aa);
//
//			int Threadtimes = size / STEP;
//			int i = 0;
//			for (i = 0; i < Threadtimes; i++) {
//				System.out.println("times:" + i);
//				for (int k = STEP * i; k < (STEP) * (i + 1); k++) {
//
//					if (node.get(k).get("code").asText().startsWith("60")) {
//						grid += "0" + node.get(k).get("code").asText() + ",";
//					} else {
//						grid += "1" + node.get(k).get("code").asText() + ",";
//					}
//
//					// grid += node.get(k).get("code").asText()+ ",";
//				}
//				System.out.println("i:" + i + "grid" + grid);
//
//				// 从现在开始3秒钟之后，每隔60秒钟执行一次job1
//				StockRealDataTask stk1=new StockRealDataTask(grid);
//				service.scheduleAtFixedRate(stk1, initialDelay2, period2,
//						TimeUnit.SECONDS);
//
//				grid = "";
//			}
//			// grid = "";
//			for (int k = STEP * i; k < STEP * i + size % STEP; k++) {
//				if (node.get(k).get("code").asText().startsWith("60")) {
//					grid += "0" + node.get(k).get("code").asText() + ",";
//				} else {
//					grid += "1" + node.get(k).get("code").asText() + ",";
//				}
//				// grid += node.get(k).get("code").asText()+ ",";
//			}
//			grid += "0000001,1399001";
//
//			//1分钟图形
//			service.scheduleAtFixedRate(new StockRealDataTask(grid), initialDelay3, period3,
//					TimeUnit.SECONDS);
//		   
//			
//			
//
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		// end
//
//	}
//	
//	
//	
//	private void loadStockMarketPriceUpdate() {
//
//		// StockMarketPriceUpdate.cleanHisData();//清理历史数据
//
//		// 线程服务调度方式
//		ScheduledExecutorService service = Executors.newScheduledThreadPool(1);
//
//		//1分钟图形
//		long initialDelay1 = 3;
//		long period1 = 60;
//
//		// start
//
//		JedisPool pool = RedisAPI.getPool();
//		Jedis j = pool.getResource();
//
//		final ObjectMapper mapper = new ObjectMapper();
//		JsonNode node;
//		try {
//
//			node = mapper.readTree(j.get("stocklist"));
//
//			RedisAPI.returnResource(pool, j);
//			// System.out.println("-------node----"+node);
//			String grid = "";
//
//			int size = node.size();
//			Date aa = new Date();
//			System.out.println("------realLin-size----" + size + aa);
//
//			int Threadtimes = size / STEP;
//			int i = 0;
//			for (i = 0; i < Threadtimes; i++) {
//				System.out.println("times:" + i);
//				for (int k = STEP * i; k < (STEP) * (i + 1); k++) {
//
//					if (node.get(k).get("code").asText().startsWith("60")) {
//						grid += "0" + node.get(k).get("code").asText() + ",";
//					} else {
//						grid += "1" + node.get(k).get("code").asText() + ",";
//					}
//
//					// grid += node.get(k).get("code").asText()+ ",";
//				}
//				System.out.println("i:" + i + "grid" + grid);
//
//				// 从现在开始3秒钟之后，每隔60秒钟执行一次job1
//				service.scheduleAtFixedRate(new StockMarketPriceUpdate(grid),
//						initialDelay1, period1, TimeUnit.SECONDS);
//
//				grid = "";
//			}
//			// grid = "";
//			for (int k = STEP * i; k < STEP * i + size % STEP; k++) {
//				if (node.get(k).get("code").asText().startsWith("60")) {
//					grid += "0" + node.get(k).get("code").asText() + ",";
//				} else {
//					grid += "1" + node.get(k).get("code").asText() + ",";
//				}
//				// grid += node.get(k).get("code").asText()+ ",";
//			}
//			grid += "0000001,1399001";
//
//			//1分钟图形
//		
//			StockMarketPriceUpdate sktask = new StockMarketPriceUpdate(grid);
//			// 从现在开始1秒钟之后，每隔10秒钟执行一次job1
//			service.scheduleAtFixedRate(sktask, initialDelay1, period1,
//					TimeUnit.SECONDS);
//		   
//			grid="";
//			
//
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		// end
//
//	}
//
//	private void loadStockList() {
//
//		long daySpan = 24 * 60 * 60 * 1000;
//		System.out.println("About to stocklist task.");
//
//		// 规定的每天时间15:33:30运行
//		final SimpleDateFormat sdf = new SimpleDateFormat(
//				"yyyy-MM-dd '08:45:00'");
//		// 首次运行时间
//		SimpleDateFormat simFmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//		String str_date = sdf.format(new Date());
//		// java.util.Date startTime;
//		java.util.Date startTime = new Date();
//		try {
//			startTime = simFmt.parse(str_date);
//		} catch (ParseException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//
//		Timer timer = new Timer();
//		StockListTask sktask = new StockListTask();
//		// timer.schedule(new RemindTask(), seconds*1000);
//		// 以每24小时执行一次
//		timer.scheduleAtFixedRate(sktask, startTime, daySpan);
//
//		System.out.println(" stocklist task put in.");
//	}
//
//	private void loadBackTable() {
//
//		long daySpan = 24 * 60 * 60 * 1000;
//		System.out.println("About to Backtable.");
//
//		// 规定的每天时间15:33:30运行
//		final SimpleDateFormat sdf = new SimpleDateFormat(
//				"yyyy-MM-dd '16:45:00'");
//		// 首次运行时间
//		SimpleDateFormat simFmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//		String str_date = sdf.format(new Date());
//		// java.util.Date startTime;
//		java.util.Date startTime = new Date();
//		try {
//			// startTime = simFmt.parse(str_date);
//			startTime = sdf.parse(str_date);
//
//		} catch (ParseException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//
//		Timer timer = new Timer();
//		StockRealLineBackUp sktask = new StockRealLineBackUp();
//		// timer.schedule(new RemindTask(), seconds*1000);
//		// 以每24小时执行一次
//		timer.scheduleAtFixedRate(sktask, startTime, daySpan);
//
//		System.out.println(" stocklist task put in.");
//	}
//
//	private void loadEveryDay() {
//
//		long daySpan = 24 * 60 * 60 * 1000;
//		System.out.println("About to Backtable.");
//
//		// 规定的每天时间15:33:30运行
//		final SimpleDateFormat sdf = new SimpleDateFormat(
//				"yyyy-MM-dd '20:45:00'");
//		final SimpleDateFormat sidf = new SimpleDateFormat(
//				"yyyy-MM-dd HH:mm:ss");
//		// 首次运行时间
//		String startDate = sdf.format(new Date());
//		Date startTime = new Date();
//		try {
//			startTime = sidf.parse(startDate);
//		} catch (ParseException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		// java.util.Date startTime=new Date();
//
//		if (System.currentTimeMillis() > startTime.getTime()) {
//
//			startTime = new Date(startTime.getTime() + daySpan);
//
//		}
//
//		Timer timer = new Timer();
//		EveryDayRask sktask = new EveryDayRask();
//		// timer.schedule(new RemindTask(), seconds*1000);
//		// 以每24小时执行一次
//		timer.scheduleAtFixedRate(sktask, startTime, daySpan);
//
//		System.out.println(" EveryDayRask put in.");
//	}

}
